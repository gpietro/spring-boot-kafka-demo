/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.demo.gpietro.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EventPatientLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4168880930401129246L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventPatientLocation\",\"namespace\":\"ch.demo.gpietro.schema\",\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"patientId\",\"type\":\"long\"},{\"name\":\"treatmentId\",\"type\":\"long\"},{\"name\":\"wardId\",\"type\":\"long\"},{\"name\":\"roomId\",\"type\":\"long\"},{\"name\":\"bedId\",\"type\":\"long\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventPatientLocation> ENCODER =
      new BinaryMessageEncoder<EventPatientLocation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventPatientLocation> DECODER =
      new BinaryMessageDecoder<EventPatientLocation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventPatientLocation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventPatientLocation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventPatientLocation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EventPatientLocation>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventPatientLocation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventPatientLocation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventPatientLocation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventPatientLocation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence type;
   private long patientId;
   private long treatmentId;
   private long wardId;
   private long roomId;
   private long bedId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventPatientLocation() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param patientId The new value for patientId
   * @param treatmentId The new value for treatmentId
   * @param wardId The new value for wardId
   * @param roomId The new value for roomId
   * @param bedId The new value for bedId
   */
  public EventPatientLocation(java.lang.CharSequence type, java.lang.Long patientId, java.lang.Long treatmentId, java.lang.Long wardId, java.lang.Long roomId, java.lang.Long bedId) {
    this.type = type;
    this.patientId = patientId;
    this.treatmentId = treatmentId;
    this.wardId = wardId;
    this.roomId = roomId;
    this.bedId = bedId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return patientId;
    case 2: return treatmentId;
    case 3: return wardId;
    case 4: return roomId;
    case 5: return bedId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: patientId = (java.lang.Long)value$; break;
    case 2: treatmentId = (java.lang.Long)value$; break;
    case 3: wardId = (java.lang.Long)value$; break;
    case 4: roomId = (java.lang.Long)value$; break;
    case 5: bedId = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'patientId' field.
   * @return The value of the 'patientId' field.
   */
  public long getPatientId() {
    return patientId;
  }


  /**
   * Sets the value of the 'patientId' field.
   * @param value the value to set.
   */
  public void setPatientId(long value) {
    this.patientId = value;
  }

  /**
   * Gets the value of the 'treatmentId' field.
   * @return The value of the 'treatmentId' field.
   */
  public long getTreatmentId() {
    return treatmentId;
  }


  /**
   * Sets the value of the 'treatmentId' field.
   * @param value the value to set.
   */
  public void setTreatmentId(long value) {
    this.treatmentId = value;
  }

  /**
   * Gets the value of the 'wardId' field.
   * @return The value of the 'wardId' field.
   */
  public long getWardId() {
    return wardId;
  }


  /**
   * Sets the value of the 'wardId' field.
   * @param value the value to set.
   */
  public void setWardId(long value) {
    this.wardId = value;
  }

  /**
   * Gets the value of the 'roomId' field.
   * @return The value of the 'roomId' field.
   */
  public long getRoomId() {
    return roomId;
  }


  /**
   * Sets the value of the 'roomId' field.
   * @param value the value to set.
   */
  public void setRoomId(long value) {
    this.roomId = value;
  }

  /**
   * Gets the value of the 'bedId' field.
   * @return The value of the 'bedId' field.
   */
  public long getBedId() {
    return bedId;
  }


  /**
   * Sets the value of the 'bedId' field.
   * @param value the value to set.
   */
  public void setBedId(long value) {
    this.bedId = value;
  }

  /**
   * Creates a new EventPatientLocation RecordBuilder.
   * @return A new EventPatientLocation RecordBuilder
   */
  public static ch.demo.gpietro.schema.EventPatientLocation.Builder newBuilder() {
    return new ch.demo.gpietro.schema.EventPatientLocation.Builder();
  }

  /**
   * Creates a new EventPatientLocation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventPatientLocation RecordBuilder
   */
  public static ch.demo.gpietro.schema.EventPatientLocation.Builder newBuilder(ch.demo.gpietro.schema.EventPatientLocation.Builder other) {
    if (other == null) {
      return new ch.demo.gpietro.schema.EventPatientLocation.Builder();
    } else {
      return new ch.demo.gpietro.schema.EventPatientLocation.Builder(other);
    }
  }

  /**
   * Creates a new EventPatientLocation RecordBuilder by copying an existing EventPatientLocation instance.
   * @param other The existing instance to copy.
   * @return A new EventPatientLocation RecordBuilder
   */
  public static ch.demo.gpietro.schema.EventPatientLocation.Builder newBuilder(ch.demo.gpietro.schema.EventPatientLocation other) {
    if (other == null) {
      return new ch.demo.gpietro.schema.EventPatientLocation.Builder();
    } else {
      return new ch.demo.gpietro.schema.EventPatientLocation.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventPatientLocation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventPatientLocation>
    implements org.apache.avro.data.RecordBuilder<EventPatientLocation> {

    private java.lang.CharSequence type;
    private long patientId;
    private long treatmentId;
    private long wardId;
    private long roomId;
    private long bedId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.demo.gpietro.schema.EventPatientLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.patientId)) {
        this.patientId = data().deepCopy(fields()[1].schema(), other.patientId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.treatmentId)) {
        this.treatmentId = data().deepCopy(fields()[2].schema(), other.treatmentId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.wardId)) {
        this.wardId = data().deepCopy(fields()[3].schema(), other.wardId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.roomId)) {
        this.roomId = data().deepCopy(fields()[4].schema(), other.roomId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.bedId)) {
        this.bedId = data().deepCopy(fields()[5].schema(), other.bedId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing EventPatientLocation instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.demo.gpietro.schema.EventPatientLocation other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.patientId)) {
        this.patientId = data().deepCopy(fields()[1].schema(), other.patientId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.treatmentId)) {
        this.treatmentId = data().deepCopy(fields()[2].schema(), other.treatmentId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.wardId)) {
        this.wardId = data().deepCopy(fields()[3].schema(), other.wardId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.roomId)) {
        this.roomId = data().deepCopy(fields()[4].schema(), other.roomId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bedId)) {
        this.bedId = data().deepCopy(fields()[5].schema(), other.bedId);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'patientId' field.
      * @return The value.
      */
    public long getPatientId() {
      return patientId;
    }


    /**
      * Sets the value of the 'patientId' field.
      * @param value The value of 'patientId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder setPatientId(long value) {
      validate(fields()[1], value);
      this.patientId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'patientId' field has been set.
      * @return True if the 'patientId' field has been set, false otherwise.
      */
    public boolean hasPatientId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'patientId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder clearPatientId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'treatmentId' field.
      * @return The value.
      */
    public long getTreatmentId() {
      return treatmentId;
    }


    /**
      * Sets the value of the 'treatmentId' field.
      * @param value The value of 'treatmentId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder setTreatmentId(long value) {
      validate(fields()[2], value);
      this.treatmentId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'treatmentId' field has been set.
      * @return True if the 'treatmentId' field has been set, false otherwise.
      */
    public boolean hasTreatmentId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'treatmentId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder clearTreatmentId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'wardId' field.
      * @return The value.
      */
    public long getWardId() {
      return wardId;
    }


    /**
      * Sets the value of the 'wardId' field.
      * @param value The value of 'wardId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder setWardId(long value) {
      validate(fields()[3], value);
      this.wardId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'wardId' field has been set.
      * @return True if the 'wardId' field has been set, false otherwise.
      */
    public boolean hasWardId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'wardId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder clearWardId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * @return The value.
      */
    public long getRoomId() {
      return roomId;
    }


    /**
      * Sets the value of the 'roomId' field.
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder setRoomId(long value) {
      validate(fields()[4], value);
      this.roomId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'roomId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder clearRoomId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bedId' field.
      * @return The value.
      */
    public long getBedId() {
      return bedId;
    }


    /**
      * Sets the value of the 'bedId' field.
      * @param value The value of 'bedId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder setBedId(long value) {
      validate(fields()[5], value);
      this.bedId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bedId' field has been set.
      * @return True if the 'bedId' field has been set, false otherwise.
      */
    public boolean hasBedId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bedId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.EventPatientLocation.Builder clearBedId() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventPatientLocation build() {
      try {
        EventPatientLocation record = new EventPatientLocation();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.patientId = fieldSetFlags()[1] ? this.patientId : (java.lang.Long) defaultValue(fields()[1]);
        record.treatmentId = fieldSetFlags()[2] ? this.treatmentId : (java.lang.Long) defaultValue(fields()[2]);
        record.wardId = fieldSetFlags()[3] ? this.wardId : (java.lang.Long) defaultValue(fields()[3]);
        record.roomId = fieldSetFlags()[4] ? this.roomId : (java.lang.Long) defaultValue(fields()[4]);
        record.bedId = fieldSetFlags()[5] ? this.bedId : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventPatientLocation>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventPatientLocation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventPatientLocation>
    READER$ = (org.apache.avro.io.DatumReader<EventPatientLocation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.type);

    out.writeLong(this.patientId);

    out.writeLong(this.treatmentId);

    out.writeLong(this.wardId);

    out.writeLong(this.roomId);

    out.writeLong(this.bedId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.patientId = in.readLong();

      this.treatmentId = in.readLong();

      this.wardId = in.readLong();

      this.roomId = in.readLong();

      this.bedId = in.readLong();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 1:
          this.patientId = in.readLong();
          break;

        case 2:
          this.treatmentId = in.readLong();
          break;

        case 3:
          this.wardId = in.readLong();
          break;

        case 4:
          this.roomId = in.readLong();
          break;

        case 5:
          this.bedId = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










