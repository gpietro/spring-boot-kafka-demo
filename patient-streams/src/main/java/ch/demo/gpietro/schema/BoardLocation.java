/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.demo.gpietro.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BoardLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3288298723643709006L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BoardLocation\",\"namespace\":\"ch.demo.gpietro.schema\",\"fields\":[{\"name\":\"patientId\",\"type\":\"long\"},{\"name\":\"treatmentId\",\"type\":\"long\"},{\"name\":\"wardId\",\"type\":\"long\"},{\"name\":\"roomId\",\"type\":\"long\"},{\"name\":\"bedId\",\"type\":\"long\"},{\"name\":\"first_name\",\"type\":\"string\"},{\"name\":\"last_name\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"birth_date\",\"type\":[\"null\",{\"type\":\"long\",\"connect.version\":1,\"connect.name\":\"org.apache.kafka.connect.data.Timestamp\",\"logicalType\":\"timestamp-millis\"}]}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<BoardLocation> ENCODER =
      new BinaryMessageEncoder<BoardLocation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BoardLocation> DECODER =
      new BinaryMessageDecoder<BoardLocation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BoardLocation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BoardLocation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BoardLocation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BoardLocation>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BoardLocation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BoardLocation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BoardLocation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BoardLocation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long patientId;
   private long treatmentId;
   private long wardId;
   private long roomId;
   private long bedId;
   private java.lang.CharSequence first_name;
   private java.lang.CharSequence last_name;
   private java.lang.CharSequence status;
   private java.time.Instant birth_date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BoardLocation() {}

  /**
   * All-args constructor.
   * @param patientId The new value for patientId
   * @param treatmentId The new value for treatmentId
   * @param wardId The new value for wardId
   * @param roomId The new value for roomId
   * @param bedId The new value for bedId
   * @param first_name The new value for first_name
   * @param last_name The new value for last_name
   * @param status The new value for status
   * @param birth_date The new value for birth_date
   */
  public BoardLocation(java.lang.Long patientId, java.lang.Long treatmentId, java.lang.Long wardId, java.lang.Long roomId, java.lang.Long bedId, java.lang.CharSequence first_name, java.lang.CharSequence last_name, java.lang.CharSequence status, java.time.Instant birth_date) {
    this.patientId = patientId;
    this.treatmentId = treatmentId;
    this.wardId = wardId;
    this.roomId = roomId;
    this.bedId = bedId;
    this.first_name = first_name;
    this.last_name = last_name;
    this.status = status;
    this.birth_date = birth_date;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return patientId;
    case 1: return treatmentId;
    case 2: return wardId;
    case 3: return roomId;
    case 4: return bedId;
    case 5: return first_name;
    case 6: return last_name;
    case 7: return status;
    case 8: return birth_date;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: patientId = (java.lang.Long)value$; break;
    case 1: treatmentId = (java.lang.Long)value$; break;
    case 2: wardId = (java.lang.Long)value$; break;
    case 3: roomId = (java.lang.Long)value$; break;
    case 4: bedId = (java.lang.Long)value$; break;
    case 5: first_name = (java.lang.CharSequence)value$; break;
    case 6: last_name = (java.lang.CharSequence)value$; break;
    case 7: status = (java.lang.CharSequence)value$; break;
    case 8: birth_date = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'patientId' field.
   * @return The value of the 'patientId' field.
   */
  public long getPatientId() {
    return patientId;
  }


  /**
   * Sets the value of the 'patientId' field.
   * @param value the value to set.
   */
  public void setPatientId(long value) {
    this.patientId = value;
  }

  /**
   * Gets the value of the 'treatmentId' field.
   * @return The value of the 'treatmentId' field.
   */
  public long getTreatmentId() {
    return treatmentId;
  }


  /**
   * Sets the value of the 'treatmentId' field.
   * @param value the value to set.
   */
  public void setTreatmentId(long value) {
    this.treatmentId = value;
  }

  /**
   * Gets the value of the 'wardId' field.
   * @return The value of the 'wardId' field.
   */
  public long getWardId() {
    return wardId;
  }


  /**
   * Sets the value of the 'wardId' field.
   * @param value the value to set.
   */
  public void setWardId(long value) {
    this.wardId = value;
  }

  /**
   * Gets the value of the 'roomId' field.
   * @return The value of the 'roomId' field.
   */
  public long getRoomId() {
    return roomId;
  }


  /**
   * Sets the value of the 'roomId' field.
   * @param value the value to set.
   */
  public void setRoomId(long value) {
    this.roomId = value;
  }

  /**
   * Gets the value of the 'bedId' field.
   * @return The value of the 'bedId' field.
   */
  public long getBedId() {
    return bedId;
  }


  /**
   * Sets the value of the 'bedId' field.
   * @param value the value to set.
   */
  public void setBedId(long value) {
    this.bedId = value;
  }

  /**
   * Gets the value of the 'first_name' field.
   * @return The value of the 'first_name' field.
   */
  public java.lang.CharSequence getFirstName() {
    return first_name;
  }


  /**
   * Sets the value of the 'first_name' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.first_name = value;
  }

  /**
   * Gets the value of the 'last_name' field.
   * @return The value of the 'last_name' field.
   */
  public java.lang.CharSequence getLastName() {
    return last_name;
  }


  /**
   * Sets the value of the 'last_name' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.last_name = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'birth_date' field.
   * @return The value of the 'birth_date' field.
   */
  public java.time.Instant getBirthDate() {
    return birth_date;
  }


  /**
   * Sets the value of the 'birth_date' field.
   * @param value the value to set.
   */
  public void setBirthDate(java.time.Instant value) {
    this.birth_date = value;
  }

  /**
   * Creates a new BoardLocation RecordBuilder.
   * @return A new BoardLocation RecordBuilder
   */
  public static ch.demo.gpietro.schema.BoardLocation.Builder newBuilder() {
    return new ch.demo.gpietro.schema.BoardLocation.Builder();
  }

  /**
   * Creates a new BoardLocation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BoardLocation RecordBuilder
   */
  public static ch.demo.gpietro.schema.BoardLocation.Builder newBuilder(ch.demo.gpietro.schema.BoardLocation.Builder other) {
    if (other == null) {
      return new ch.demo.gpietro.schema.BoardLocation.Builder();
    } else {
      return new ch.demo.gpietro.schema.BoardLocation.Builder(other);
    }
  }

  /**
   * Creates a new BoardLocation RecordBuilder by copying an existing BoardLocation instance.
   * @param other The existing instance to copy.
   * @return A new BoardLocation RecordBuilder
   */
  public static ch.demo.gpietro.schema.BoardLocation.Builder newBuilder(ch.demo.gpietro.schema.BoardLocation other) {
    if (other == null) {
      return new ch.demo.gpietro.schema.BoardLocation.Builder();
    } else {
      return new ch.demo.gpietro.schema.BoardLocation.Builder(other);
    }
  }

  /**
   * RecordBuilder for BoardLocation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BoardLocation>
    implements org.apache.avro.data.RecordBuilder<BoardLocation> {

    private long patientId;
    private long treatmentId;
    private long wardId;
    private long roomId;
    private long bedId;
    private java.lang.CharSequence first_name;
    private java.lang.CharSequence last_name;
    private java.lang.CharSequence status;
    private java.time.Instant birth_date;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.demo.gpietro.schema.BoardLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.patientId)) {
        this.patientId = data().deepCopy(fields()[0].schema(), other.patientId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.treatmentId)) {
        this.treatmentId = data().deepCopy(fields()[1].schema(), other.treatmentId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.wardId)) {
        this.wardId = data().deepCopy(fields()[2].schema(), other.wardId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.roomId)) {
        this.roomId = data().deepCopy(fields()[3].schema(), other.roomId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.bedId)) {
        this.bedId = data().deepCopy(fields()[4].schema(), other.bedId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.first_name)) {
        this.first_name = data().deepCopy(fields()[5].schema(), other.first_name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.last_name)) {
        this.last_name = data().deepCopy(fields()[6].schema(), other.last_name);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.birth_date)) {
        this.birth_date = data().deepCopy(fields()[8].schema(), other.birth_date);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing BoardLocation instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.demo.gpietro.schema.BoardLocation other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.patientId)) {
        this.patientId = data().deepCopy(fields()[0].schema(), other.patientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.treatmentId)) {
        this.treatmentId = data().deepCopy(fields()[1].schema(), other.treatmentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.wardId)) {
        this.wardId = data().deepCopy(fields()[2].schema(), other.wardId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.roomId)) {
        this.roomId = data().deepCopy(fields()[3].schema(), other.roomId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.bedId)) {
        this.bedId = data().deepCopy(fields()[4].schema(), other.bedId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.first_name)) {
        this.first_name = data().deepCopy(fields()[5].schema(), other.first_name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.last_name)) {
        this.last_name = data().deepCopy(fields()[6].schema(), other.last_name);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.status)) {
        this.status = data().deepCopy(fields()[7].schema(), other.status);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.birth_date)) {
        this.birth_date = data().deepCopy(fields()[8].schema(), other.birth_date);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'patientId' field.
      * @return The value.
      */
    public long getPatientId() {
      return patientId;
    }


    /**
      * Sets the value of the 'patientId' field.
      * @param value The value of 'patientId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setPatientId(long value) {
      validate(fields()[0], value);
      this.patientId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'patientId' field has been set.
      * @return True if the 'patientId' field has been set, false otherwise.
      */
    public boolean hasPatientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'patientId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearPatientId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'treatmentId' field.
      * @return The value.
      */
    public long getTreatmentId() {
      return treatmentId;
    }


    /**
      * Sets the value of the 'treatmentId' field.
      * @param value The value of 'treatmentId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setTreatmentId(long value) {
      validate(fields()[1], value);
      this.treatmentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'treatmentId' field has been set.
      * @return True if the 'treatmentId' field has been set, false otherwise.
      */
    public boolean hasTreatmentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'treatmentId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearTreatmentId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'wardId' field.
      * @return The value.
      */
    public long getWardId() {
      return wardId;
    }


    /**
      * Sets the value of the 'wardId' field.
      * @param value The value of 'wardId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setWardId(long value) {
      validate(fields()[2], value);
      this.wardId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'wardId' field has been set.
      * @return True if the 'wardId' field has been set, false otherwise.
      */
    public boolean hasWardId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'wardId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearWardId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * @return The value.
      */
    public long getRoomId() {
      return roomId;
    }


    /**
      * Sets the value of the 'roomId' field.
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setRoomId(long value) {
      validate(fields()[3], value);
      this.roomId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'roomId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearRoomId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'bedId' field.
      * @return The value.
      */
    public long getBedId() {
      return bedId;
    }


    /**
      * Sets the value of the 'bedId' field.
      * @param value The value of 'bedId'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setBedId(long value) {
      validate(fields()[4], value);
      this.bedId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'bedId' field has been set.
      * @return True if the 'bedId' field has been set, false otherwise.
      */
    public boolean hasBedId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'bedId' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearBedId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'first_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return first_name;
    }


    /**
      * Sets the value of the 'first_name' field.
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.first_name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'first_name' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return last_name;
    }


    /**
      * Sets the value of the 'last_name' field.
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.last_name = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'last_name' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.status = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearStatus() {
      status = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'birth_date' field.
      * @return The value.
      */
    public java.time.Instant getBirthDate() {
      return birth_date;
    }


    /**
      * Sets the value of the 'birth_date' field.
      * @param value The value of 'birth_date'.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder setBirthDate(java.time.Instant value) {
      validate(fields()[8], value);
      this.birth_date = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'birth_date' field has been set.
      * @return True if the 'birth_date' field has been set, false otherwise.
      */
    public boolean hasBirthDate() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'birth_date' field.
      * @return This builder.
      */
    public ch.demo.gpietro.schema.BoardLocation.Builder clearBirthDate() {
      birth_date = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BoardLocation build() {
      try {
        BoardLocation record = new BoardLocation();
        record.patientId = fieldSetFlags()[0] ? this.patientId : (java.lang.Long) defaultValue(fields()[0]);
        record.treatmentId = fieldSetFlags()[1] ? this.treatmentId : (java.lang.Long) defaultValue(fields()[1]);
        record.wardId = fieldSetFlags()[2] ? this.wardId : (java.lang.Long) defaultValue(fields()[2]);
        record.roomId = fieldSetFlags()[3] ? this.roomId : (java.lang.Long) defaultValue(fields()[3]);
        record.bedId = fieldSetFlags()[4] ? this.bedId : (java.lang.Long) defaultValue(fields()[4]);
        record.first_name = fieldSetFlags()[5] ? this.first_name : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.last_name = fieldSetFlags()[6] ? this.last_name : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.status = fieldSetFlags()[7] ? this.status : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.birth_date = fieldSetFlags()[8] ? this.birth_date : (java.time.Instant) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BoardLocation>
    WRITER$ = (org.apache.avro.io.DatumWriter<BoardLocation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BoardLocation>
    READER$ = (org.apache.avro.io.DatumReader<BoardLocation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










